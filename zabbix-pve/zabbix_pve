#!/bin/bash
#
# Zabbix agent extension for monitoring Proxmox Virtual Environment
#

BUFFER=/tmp/zabbix-pve
CFG=/etc/zabbix/zabbix-pve.conf
CFGCTPID=/etc/zabbix/zabbix-ctpid.conf
SOFTWARE="curl gawk sed jo jq"

function discover_ctpid() {
   ! test -f $CFGCTPID && exit
   jo -p data=$( jo -a $(
   cat $CFGCTPID | sed "/^#/d;s/#.*//" | while read line
   do
      ctid=${line/,*/}
      if test -f $BUFFER/vm_$ctid; then
         line=${line/$ctid,/}
         name=${line/,*}
         expr=${line/$name,/}
         ctname=$(grep name: $BUFFER/vm_$ctid)
         ctname=${ctname/*:/}
         jo {#CTPID}=$ctid,$name {#CTPIDNAME}=$name {#CTPIDID}=\"$ctid\" {#CTPIDCTNAME}=$ctname
      fi
   done ) )
}

function discover_ve() {
   ! compgen -G "$BUFFER/vm_*" > /dev/null && { echo -e "{\n\t\"data\":[]\n}\n"; exit 0; }
   first=1
   echo -e "{\n\t\"data\":["
   for file in $BUFFER/vm_*
   do
      test $first -ne 1 && echo ","
      first=0
      name=$(grep "^name:" $file )
      pool=$(grep "^pool:" $file )
      type=$(grep "^type:" $file )
      id=$(grep "^id:" $file )
      cpus=$(grep "^cpus:" $file )
      status=$(grep "^status:" $file )
      echo -e "\t{\n\t\t\"{#PVEID}\":\"${id/*:/}\",\n\t\t\"{#PVENAME}\":\"${name/*:/}\",\n\t\t\"{#PVESTATUS}\":\"${status/*:/}\",\n\t\t\"{#PVECPUS}\":\"${cpus/*:/}\",\n\t\t\"{#PVETYPE}\":\"${type/*:/}\",\n\t\t\"{#PVEPOOL}\":\"${pool/*:/}\""
      echo -n -e "\t}"
   done
   echo -e "\n\t]\n}"
}

function getdata() {
   test -f $CFG || { echo "Error: Credential configuration file not found."; exit 1; }
   . $CFG
   mkdir $BUFFER.$$; chmod 750 $BUFFER.$$
   cd $BUFFER.$$
   data=$(curl -s -k -d @<(cat <<<"username=$USERNAME&password=$PASSWORD") https://localhost:8006/api2/json/access/ticket)
   test "$data" = "${date/ticket/}" && { echo "Unable to login to PVE."; exit 1; }

   cookie=$(echo $data | jq --raw-output '.data.ticket' | sed 's/^/PVEAuthCookie=/')
   token=$(echo $data | jq --raw-output '.data.CSRFPreventionToken')
   CURL="curl -s -k -b $cookie https://localhost:8006/api2/json"

   ( $CURL/nodes/localhost/lxc/; $CURL/nodes/localhost/qemu/ ) | jq '.data[]' | awk '
      /^}/ { found=0;
                fn=sprintf("vm_%s",id);
                printf("name:%s\n", name) > fn;
                printf("pool:\n") > fn;
                printf("type:%s\n", type) > fn;
                printf("id:%s\n", id) > fn;
                printf("mem-used:%s\n", memused) > fn;
                printf("mem-total:%s\n", memtotal) > fn;
                printf("swap-used:%s\n", swapused) > fn;
                printf("swap-total:%s\n", swaptotal) > fn;
                printf("cpu:%s\n", cpu) > fn;
                printf("io-read:%s\n", ioread) > fn;
                printf("io-write:%s\n", iowrite) > fn;
                printf("disk-used:%s\n", diskused) > fn;
                printf("disk-total:%s\n", disktotal) > fn;
                printf("net-in:%s\n", netin) > fn;
                printf("net-out:%s\n", netout) > fn;
                printf("uptime:%s\n", uptime) > fn;
                printf("cpus:%s\n", cpus) > fn;
                printf("status:%s\n", status) > fn;
                printf("locked:%s\n", locked) > fn;
                swapused=0;
                swaptotal=0;
              }
      /"name"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);name=$2;}
      /"type"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);type=$2;}
      /"vmid"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);id=$2;}
      /"mem"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);memused=$2;}
      /"maxmem"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);memtotal=$2;}
      /"swap"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);swapused=$2;}
      /"maxswap"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);swaptotal=$2;}
      /"cpu"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);cpu=$2;}
      /"diskread"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);ioread=$2;}
      /"diskwrite"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);iowrite=$2;}
      /"disk"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);diskused=$2;}
      /"maxdisk"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);disktotal=$2;}
      /"netin"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);netin=$2;}
      /"netout"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);netout=$2;}
      /"uptime"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);uptime=$2;}
      /"cpus"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);cpus=$2;}
      /"status"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);status=$2;}
      /"lock"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);if ($2=="") locked=0; else locked=1;}
      /^{/ { found=1; type="qemu"; locked=0; mem=0; maxmem=0; swapused=0; swaptotal=0; cpu=0; diskread=0; diskwrite=0; disk=0; maxdisk=0; netin=0; netout=0; uptime=0; cpus=0; status=0; }
'
   for pool in $($CURL/pools/ | jq -r '.[][].poolid')
   do
      vms=$( $CURL/pools/$pool | jq -r '.[].members[] | "vm_\(.vmid)"' )
      test "$vms" != "" && sed -i "s/pool:/pool:$pool/" $vms 2> /dev/null
   done

   for lxc in $($CURL/nodes/localhost/lxc | jq -r '.data[].vmid')
   do
      snaps=$($CURL/nodes/localhost/lxc/$lxc/snapshot | jq -r '.data[].name' | awk '{ if ($1 !="current") print $1}' | wc -l)
      echo "snapshots:$snaps" >> vm_$lxc
   done

   for qm in $($CURL/nodes/localhost/qemu | jq -r '.data[].vmid')
   do
      snaps=$($CURL/nodes/localhost/qemu/$qm/snapshot | jq -r '.data[].name' | awk '{ if ($1 !="current") print $1}' | wc -l)
      echo "snapshots:$snaps" >> vm_$qm
   done

   $CURL/nodes/localhost/version | jq '.' | awk '
      /"version"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);printf("version:%s\n", $2) > "pve_version";}
      /"release"/ { sub(/,$/, "", $2); gsub(/"/, "", $2);printf("release:%s\n",  $2) > "pve_version";}
      /"repoid"/ { sub(/,$/, "", $2); gsub(/"/, "", $2); printf("repoid:%s\n",  $2) > "pve_version";}'

   ps --no-header -e -o lxc,etimes,pid,cmd | grep -v "^-" | sort -rn -k2,2 > ctpid.list

   test -d $BUFFER && mv $BUFFER $BUFFER.old
   mv $BUFFER.$$ $BUFFER
   rm -rf $BUFFER.old
}

function ctpid_get_pid() {
   ! test -f $CFGCTPID && exit
   ctid=${1/,*/}
   expr=$(grep "^$arg," $CFGCTPID | sed "s/#.*//;s/$arg,//" )
   test "$expr" = "" && exit
   pid=$(grep "^$ctid" $BUFFER/ctpid.list | grep -m 1 "$expr" | sed -r -e "s/[0-9]+ +[0-9]+ +([0-9]+).*/\1/")
   echo ${pid:-0}
}

function sanity_check() {
   ok=1
   for prog in $SOFTWARE
   do
      which $prog > /dev/null || { echo "Missing program $prog."; ok=0; }
   done
   test -f $CONFIG || { echo "Missing configfile $CONFIG"; ok=0; }
   test $ok -ne 1 && { echo "Sanity check failed. Aboring." ; exit 1; }
}

sanity_check

action=$1
arg=$2

case "$action" in
getdata)
   getdata
;;
pve.version.master)
   test -f $BUFFER/pve_version && cat $BUFFER/pve_version
;;
pve.vm.discover)
   discover_ve
;;
pve.vm.master)
   test -f $BUFFER/vm_$arg && cat $BUFFER/vm_$arg
;;
pve.ctpid.discover)
   discover_ctpid
;;
pve.ctpid.pid)
   ctpid_get_pid $arg
;;
esac
